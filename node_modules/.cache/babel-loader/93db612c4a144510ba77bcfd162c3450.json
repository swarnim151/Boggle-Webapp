{"ast":null,"code":"var _jsxFileName = \"/Users/swarnim/Desktop/boggle_app-master/src/extra.js\";\nimport React, { Component } from \"react\";\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(grid, word, matched_letter, x, y, visited_nodes, answer) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n        if (i >= 0 && j >= 0 && i < grid.length && j < grid.length && visited_nodes[i][j] === false) {\n          if (word[matched_letter] === grid[i][j]) {\n            if (word.length - matched_letter === 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              this.check_for_letter_traversal(grid, word, matched_letter, i, j, visited_nodes, answer);\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n      var skip_by = 8192;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n\n        while (skip_by >= 1) {\n          if (a + skip_by < dictionary.length && word[0] === dictionary[a + skip_by][0].toUpperCase()) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"the sahi 1 word\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 2;\n          }\n        }\n\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (var i = 0; i < start_position.length; i++) {\n          if (answer.includes(word)) {\n            break;\n          }\n\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          var element = start_position[i];\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(grid, word, 1, element[0], element[1], visited_nodes, answer);\n        }\n      }\n\n      a++;\n    }\n\n    return answer;\n  }\n\n  render() {\n    var wordss = [\"aa\", \"aah\", \"aahed\", \"aahing\", \"aahs\", \"aal\", \"aalii\", \"aaliis\", \"aals\", \"aardvark\", \"aardvarks\", \"aardwolf\", \"aardwolves\", \"aargh\", \"aarrgh\", \"aarrghh\", \"aas\", \"aasvogel\", \"aasvogels\", \"ab\", \"aba\", \"abaca\", \"abacas\", \"abaci\", \"aback\", \"abacterial\", \"abacus\", \"abacuses\", \"abaft\", \"abaka\", \"abakas\", \"abalone\", \"abalones\", \"operationisms\", \"operationist\", \"operationists\", \"operations\", \"operative\", \"operatively\", \"operativeness\", \"operativenesses\", \"operatives\", \"operator\", \"operatorless\", \"operators\", \"opercele\", \"operceles\", \"opercula\", \"opercular\", \"operculars\", \"operculate\", \"operculated\", \"opercule\", \"opercules\", \"operculum\", \"tt\", \"operculums\", \"squamosals\", \"squamose\", \"squamous\", \"squamulose\", \"squander\", \"squandered\", \"squanderer\", \"squanderers\", \"squandering\", \"squanders\", \"square\", \"squared\", \"squarely\", \"squareness\", \"squarenesses\", \"squarer\", \"squarers\", \"squares\", \"squarest\", \"squaring\", \"squarish\", \"squarishly\", \"squarishness\", \"squarishnesses\", \"squash\", \"squashed\", \"squasher\", \"squashers\", \"squashes\", \"squashier\", \"squashiest\", \"squashily\", \"squashiness\", \"squashinesses\", \"squashing\", \"squashy\", \"squat\", \"squatly\", \"squatness\", \"squatnesses\", \"squats\", \"squatted\", \"squatter\", \"squattered\", \"squattering\", \"squatters\", \"squattest\", \"squattier\", \"squattiest\", \"squatting\", \"squatty\", \"squaw\", \"squawfish\", \"squawfishes\", \"squawk\", \"squawked\", \"squawker\", \"squawkers\", \"squawking\", \"squawks\", \"squawroot\", \"squawroots\", \"squaws\", \"squeak\", \"squeaked\", \"squeaker\", \"squeakers\", \"squeakier\", \"squeakiest\", \"squeaking\", \"squeaks\", \"squeaky\", \"squeal\", \"squealed\", \"squealer\", \"squealers\", \"squealing\", \"squeals\", \"squeamish\", \"squeamishly\", \"squeamishness\", \"squeamishnesses\", \"squeegee\", \"squeegeed\", \"squeegeeing\", \"squeegees\", \"squeezabilities\", \"squeezability\", \"squeezable\", \"squeeze\", \"squeezed\", \"squeezer\", \"squeezers\", \"abcd\"];\n    console.log(this.boggle([[\"A\", \"B\", \"C\", \"D\"], [\"E\", \"F\", \"A\", \"H\"], [\"I\", \"J\", \"K\", \"L\"], [\"A\", \"B\", \"C\", \"D\"]], word_list));\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, \"My name is Swarnim\");\n  }\n\n}\n\nexport default FindAllValidWords;","map":{"version":3,"sources":["/Users/swarnim/Desktop/boggle_app-master/src/extra.js"],"names":["React","Component","word_list","FindAllValidWords","state","visited_node","n","visited_nodes","i","row","j","push","check_for_letter_traversal","grid","word","matched_letter","x","y","answer","length","includes","grid_contains_all_unique_letters","first_letter_map","has","boggle","dictionary","Map","console","log","letter","set","get","a","toUpperCase","start_position","skip_by","element","render","wordss"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  state = {};\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(\n    grid,\n    word,\n    matched_letter,\n    x,\n    y,\n    visited_nodes,\n    answer\n  ) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n\n        if (\n          i >= 0 &&\n          j >= 0 &&\n          i < grid.length &&\n          j < grid.length &&\n          visited_nodes[i][j] === false\n        ) {\n          if (word[matched_letter] === grid[i][j]) {\n            if (word.length - matched_letter === 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              this.check_for_letter_traversal(\n                grid,\n                word,\n                matched_letter,\n                i,\n                j,\n                visited_nodes,\n                answer\n              );\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n\n      var skip_by = 8192;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n        while (skip_by >= 1) {\n          if (\n            a + skip_by < dictionary.length &&\n            word[0] === dictionary[a + skip_by][0].toUpperCase()\n          ) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"the sahi 1 word\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 2;\n          }\n        }\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (var i = 0; i < start_position.length; i++) {\n          if (answer.includes(word)) {\n            break;\n          }\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          var element = start_position[i];\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(\n            grid,\n            word,\n            1,\n            element[0],\n            element[1],\n            visited_nodes,\n            answer\n          );\n        }\n      }\n      a++;\n    }\n    return answer;\n  }\n\n  render() {\n    var wordss = [\n      \"aa\",\n      \"aah\",\n      \"aahed\",\n      \"aahing\",\n      \"aahs\",\n      \"aal\",\n      \"aalii\",\n      \"aaliis\",\n      \"aals\",\n      \"aardvark\",\n      \"aardvarks\",\n      \"aardwolf\",\n      \"aardwolves\",\n      \"aargh\",\n      \"aarrgh\",\n      \"aarrghh\",\n      \"aas\",\n      \"aasvogel\",\n      \"aasvogels\",\n      \"ab\",\n      \"aba\",\n      \"abaca\",\n      \"abacas\",\n      \"abaci\",\n      \"aback\",\n      \"abacterial\",\n      \"abacus\",\n      \"abacuses\",\n      \"abaft\",\n      \"abaka\",\n      \"abakas\",\n      \"abalone\",\n      \"abalones\",\n      \"operationisms\",\n      \"operationist\",\n      \"operationists\",\n      \"operations\",\n      \"operative\",\n      \"operatively\",\n      \"operativeness\",\n      \"operativenesses\",\n      \"operatives\",\n      \"operator\",\n      \"operatorless\",\n      \"operators\",\n      \"opercele\",\n      \"operceles\",\n      \"opercula\",\n      \"opercular\",\n      \"operculars\",\n      \"operculate\",\n      \"operculated\",\n      \"opercule\",\n      \"opercules\",\n      \"operculum\",\n      \"tt\",\n      \"operculums\",\n      \"squamosals\",\n      \"squamose\",\n      \"squamous\",\n      \"squamulose\",\n      \"squander\",\n      \"squandered\",\n      \"squanderer\",\n      \"squanderers\",\n      \"squandering\",\n      \"squanders\",\n      \"square\",\n      \"squared\",\n      \"squarely\",\n      \"squareness\",\n      \"squarenesses\",\n      \"squarer\",\n      \"squarers\",\n      \"squares\",\n      \"squarest\",\n      \"squaring\",\n      \"squarish\",\n      \"squarishly\",\n      \"squarishness\",\n      \"squarishnesses\",\n      \"squash\",\n      \"squashed\",\n      \"squasher\",\n      \"squashers\",\n      \"squashes\",\n      \"squashier\",\n      \"squashiest\",\n      \"squashily\",\n      \"squashiness\",\n      \"squashinesses\",\n      \"squashing\",\n      \"squashy\",\n      \"squat\",\n      \"squatly\",\n      \"squatness\",\n      \"squatnesses\",\n      \"squats\",\n      \"squatted\",\n      \"squatter\",\n      \"squattered\",\n      \"squattering\",\n      \"squatters\",\n      \"squattest\",\n      \"squattier\",\n      \"squattiest\",\n      \"squatting\",\n      \"squatty\",\n      \"squaw\",\n      \"squawfish\",\n      \"squawfishes\",\n      \"squawk\",\n      \"squawked\",\n      \"squawker\",\n      \"squawkers\",\n      \"squawking\",\n      \"squawks\",\n      \"squawroot\",\n      \"squawroots\",\n      \"squaws\",\n      \"squeak\",\n      \"squeaked\",\n      \"squeaker\",\n      \"squeakers\",\n      \"squeakier\",\n      \"squeakiest\",\n      \"squeaking\",\n      \"squeaks\",\n      \"squeaky\",\n      \"squeal\",\n      \"squealed\",\n      \"squealer\",\n      \"squealers\",\n      \"squealing\",\n      \"squeals\",\n      \"squeamish\",\n      \"squeamishly\",\n      \"squeamishness\",\n      \"squeamishnesses\",\n      \"squeegee\",\n      \"squeegeed\",\n      \"squeegeeing\",\n      \"squeegees\",\n      \"squeezabilities\",\n      \"squeezability\",\n      \"squeezable\",\n      \"squeeze\",\n      \"squeezed\",\n      \"squeezer\",\n      \"squeezers\",\n      \"abcd\"\n    ];\n    console.log(\n      this.boggle(\n        [\n          [\"A\", \"B\", \"C\", \"D\"],\n          [\"E\", \"F\", \"A\", \"H\"],\n          [\"I\", \"J\", \"K\", \"L\"],\n          [\"A\", \"B\", \"C\", \"D\"]\n        ],\n        word_list\n      )\n    );\n    return <h1>My name is Swarnim</h1>;\n  }\n}\n\nexport default FindAllValidWords;\n"]},"metadata":{},"sourceType":"module"}