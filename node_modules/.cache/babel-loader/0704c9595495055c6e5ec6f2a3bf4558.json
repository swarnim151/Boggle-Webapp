{"ast":null,"code":"var _jsxFileName = \"/Users/swarnim/Desktop/boggle_app-master/src/extra.js\";\nimport React, { Component } from \"react\";\nimport { db } from \"./firebase\";\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(grid, word, matched_letter, x, y, visited_nodes, answer) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n        if (i >= 0 && j >= 0 && i < grid.length && j < grid.length && visited_nodes[i][j] == false) {\n          if (word[matched_letter] == grid[i][j]) {\n            if (word.length - matched_letter == 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              this.check_for_letter_traversal(grid, word, matched_letter, i, j, visited_nodes, answer);\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n      var skip_by = 10;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n\n        while (skip_by >= 1) {\n          if (a + skip_by < dictionary.length && word[0] == dictionary[a + skip_by][0].toUpperCase()) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"the sahi 1 word\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 10;\n          }\n        }\n\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (element of start_position) {\n          if (answer.includes(word)) {\n            break;\n          }\n\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(grid, word, 1, element[0], element[1], visited_nodes, answer);\n        }\n      }\n\n      a++;\n    }\n\n    return answer;\n  }\n\n  render() {\n    console.log(this.boggle([[\"A\", \"B\", \"C\", \"D\"], [\"E\", \"F\", \"A\", \"H\"], [\"I\", \"J\", \"K\", \"L\"], [\"A\", \"B\", \"C\", \"D\"]], [\"abcd\"]));\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"My name is Swarnim\");\n  }\n\n}\n\nexport default FindAllValidWords;","map":{"version":3,"sources":["/Users/swarnim/Desktop/boggle_app-master/src/extra.js"],"names":["React","Component","db","word_list","FindAllValidWords","state","visited_node","n","visited_nodes","i","row","j","push","check_for_letter_traversal","grid","word","matched_letter","x","y","answer","length","includes","grid_contains_all_unique_letters","first_letter_map","has","boggle","dictionary","Map","console","log","letter","set","get","a","toUpperCase","start_position","skip_by","element","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { db } from \"./firebase\";\n\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  state = {};\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(\n    grid,\n    word,\n    matched_letter,\n    x,\n    y,\n    visited_nodes,\n    answer\n  ) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n\n        if (\n          i >= 0 &&\n          j >= 0 &&\n          i < grid.length &&\n          j < grid.length &&\n          visited_nodes[i][j] == false\n        ) {\n          if (word[matched_letter] == grid[i][j]) {\n            if (word.length - matched_letter == 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              this.check_for_letter_traversal(\n                grid,\n                word,\n                matched_letter,\n                i,\n                j,\n                visited_nodes,\n                answer\n              );\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n\n      var skip_by = 10;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n        while (skip_by >= 1) {\n          if (\n            a + skip_by < dictionary.length &&\n            word[0] == dictionary[a + skip_by][0].toUpperCase()\n          ) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"the sahi 1 word\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 10;\n          }\n        }\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (element of start_position) {\n          if (answer.includes(word)) {\n            break;\n          }\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(\n            grid,\n            word,\n            1,\n            element[0],\n            element[1],\n            visited_nodes,\n            answer\n          );\n        }\n      }\n      a++;\n    }\n    return answer;\n  }\n\n  render() {\n    console.log(\n      this.boggle(\n        [\n          [\"A\", \"B\", \"C\", \"D\"],\n          [\"E\", \"F\", \"A\", \"H\"],\n          [\"I\", \"J\", \"K\", \"L\"],\n          [\"A\", \"B\", \"C\", \"D\"]\n        ],\n        [\"abcd\"]\n      )\n    );\n    return <h1>My name is Swarnim</h1>;\n  }\n}\n\nexport default FindAllValidWords;\n"]},"metadata":{},"sourceType":"module"}