{"ast":null,"code":"var _jsxFileName = \"/Users/swarnim/Desktop/boggle_app-master/src/boggle.js\";\nimport React, { Component } from \"react\";\nimport { db } from \"./firebase\";\nimport { word_list } from \"./word_list\";\n\nclass Boggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      load_challenge: false,\n      show_grid: false,\n      grid: [[\"A\", \"B\", \"N\", \"T\", \"D\"], [\"H\", \"N\", \"C\", \"P\", \"R\"], [\"I\", \"L\", \"A\", \"E\", \"E\"], [\"G\", \"L\", \"Z\", \"R\", \"E\"], [\"S\", \"R\", \"F\", \"O\", \"S\"]],\n      all_valid_words: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.SetTheGrid = this.SetTheGrid.bind(this);\n  }\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(grid, word, matched_letter, x, y, visited_nodes, answer) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        if (i >= 0 && j >= 0 && i < grid.length && j < grid.length && visited_nodes[i][j] === false) {\n          if (word[matched_letter] === grid[i][j]) {\n            if (word.length - matched_letter === 1) {\n              answer.push(word);\n              return true;\n            } else {\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n\n              if (this.check_for_letter_traversal(grid, word, matched_letter, i, j, visited_nodes, answer)) {\n                return true;\n              }\n\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n    var boggle_call = 0;\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n      var skip_by = 8192;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n\n        while (skip_by >= 1) {\n          if (a + skip_by < dictionary.length && word[0] === dictionary[a + skip_by][0].toUpperCase()) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"reducing skip_by\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 2;\n          }\n        }\n\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          boggle_call++;\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (var i = 0; i < start_position.length; i++) {\n          if (answer.includes(word)) {\n            break;\n          } //boggle_call++;\n\n\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          var element = start_position[i];\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(grid, word, 1, element[0], element[1], visited_nodes, answer);\n        }\n      }\n\n      a++;\n    }\n\n    console.log(boggle_call, \"boggle_call\");\n    this.setState({\n      all_valid_words: answer\n    });\n    return answer;\n  }\n\n  SetTheGrid(grid) {\n    var given_grid = [];\n\n    for (var i = 0; i < 5; i++) {\n      var row = [];\n\n      for (var j = 0; j < 5; j++) {\n        var position = 5 * i + j;\n        row.push(grid[position]);\n      }\n\n      given_grid.push(row);\n    }\n\n    console.log(given_grid);\n    this.setState({\n      grid: given_grid\n    });\n    console.log(given_grid[0][0]);\n    console.log(word_list[0]);\n    console.log(word_list[10000]);\n  }\n\n  GettheGrid(SetTheGrid) {\n    var girdssssss = db.collection(\"grid\");\n    girdssssss.doc(\"CWzx6Xzk7a6RC91voh5S\").get().then(function (snap) {\n      console.log(snap);\n\n      if (snap.exists) {\n        console.log(snap.data().grid);\n        SetTheGrid(snap.data().grid);\n      }\n    });\n    console.log(\"hey\");\n  }\n\n  PrintGrid() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, this.state.grid[0][0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, this.state.grid[0][1]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, this.state.grid[0][2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, this.state.grid[0][3]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, this.state.grid[0][4])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.state.grid[1][0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.state.grid[1][1]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, this.state.grid[1][2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, this.state.grid[1][3]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, this.state.grid[1][4])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, this.state.grid[2][0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.grid[2][1]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, this.state.grid[2][2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.state.grid[2][3]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, this.state.grid[2][4])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.state.grid[3][0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, this.state.grid[3][1]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, this.state.grid[3][2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, this.state.grid[3][3]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, this.state.grid[3][4])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, this.state.grid[4][0]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, this.state.grid[4][1]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, this.state.grid[4][2]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, this.state.grid[4][3]), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, this.state.grid[4][4])), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })));\n  }\n\n  handleSubmit(event) {\n    this.setState({\n      load_challenge: true\n    });\n    event.preventDefault();\n  }\n\n  handleChange(event, num) {\n    this.GettheGrid(this.SetTheGrid);\n    this.setState({\n      show_grid: true\n    });\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.state.load_challenge) {\n      if (this.state.show_grid) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }, this.PrintGrid()), React.createElement(BoggleGame, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 270\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276\n          },\n          __self: this\n        }, \" Load Challenge 1\"), React.createElement(\"button\", {\n          onClick: this.handleChange(1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277\n          },\n          __self: this\n        }, \"Load Challenge\"), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 278\n          },\n          __self: this\n        }, \" Load Challenge 2\"), React.createElement(\"button\", {\n          onClick: this.handleChange(1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279\n          },\n          __self: this\n        }, \"Load Challenge\"), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 280\n          },\n          __self: this\n        }, \" Load Challenge 3\"), React.createElement(\"button\", {\n          onClick: this.handleChange(1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          },\n          __self: this\n        }, \"Load Challenge\"));\n      }\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, \"Load Challenge\"));\n    }\n  }\n\n}\n\nexport default Boggle;\n\nclass BoggleGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input_word: \"\",\n      score: 0,\n      all_valid_words: [\"ACE\", \"ZEROS\"],\n      game_state: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input_word: event.target.value\n    });\n  }\n\n  handleStop(event) {\n    event.preventDefault();\n    this.setState({\n      game_state: false\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.valid_words.includes(this.state.input_word)) {\n      alert(\"The word has already been found.\");\n    } else if ( //remove the word from this.state.valid_words\n    this.state.all_valid_words.includes(this.state.input_word.toUpperCase())) {\n      var new_score = this.state.score;\n      new_score++;\n      this.setState({\n        score: new_score\n      });\n    } else {\n      alert(\"The word you have entered is invalid.\");\n    }\n  }\n\n  render() {\n    if (this.state.game_state) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, \"Enter a word:\", React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.input_word,\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 352\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleStop,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360\n        },\n        __self: this\n      }, \"Stop\"))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, \" Valid words list: \"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, this.state.score));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, this.state.score));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/swarnim/Desktop/boggle_app-master/src/boggle.js"],"names":["React","Component","db","word_list","Boggle","constructor","props","state","load_challenge","show_grid","grid","all_valid_words","handleSubmit","bind","handleChange","SetTheGrid","visited_node","n","visited_nodes","i","row","j","push","check_for_letter_traversal","word","matched_letter","x","y","answer","length","grid_contains_all_unique_letters","first_letter_map","has","boggle","dictionary","Map","boggle_call","console","log","letter","set","get","a","toUpperCase","start_position","skip_by","includes","element","setState","given_grid","position","GettheGrid","girdssssss","collection","doc","then","snap","exists","data","PrintGrid","event","preventDefault","num","render","BoggleGame","input_word","score","game_state","handleStop","target","value","valid_words","alert","new_score"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { db } from \"./firebase\";\n\nimport { word_list } from \"./word_list\";\n\nclass Boggle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      load_challenge: false,\n      show_grid: false,\n      grid: [\n        [\"A\", \"B\", \"N\", \"T\", \"D\"],\n        [\"H\", \"N\", \"C\", \"P\", \"R\"],\n        [\"I\", \"L\", \"A\", \"E\", \"E\"],\n        [\"G\", \"L\", \"Z\", \"R\", \"E\"],\n        [\"S\", \"R\", \"F\", \"O\", \"S\"]\n      ],\n      all_valid_words: []\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.SetTheGrid = this.SetTheGrid.bind(this);\n  }\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(\n    grid,\n    word,\n    matched_letter,\n    x,\n    y,\n    visited_nodes,\n    answer\n  ) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        if (\n          i >= 0 &&\n          j >= 0 &&\n          i < grid.length &&\n          j < grid.length &&\n          visited_nodes[i][j] === false\n        ) {\n          if (word[matched_letter] === grid[i][j]) {\n            if (word.length - matched_letter === 1) {\n              answer.push(word);\n              return true;\n            } else {\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              if (\n                this.check_for_letter_traversal(\n                  grid,\n                  word,\n                  matched_letter,\n                  i,\n                  j,\n                  visited_nodes,\n                  answer\n                )\n              ) {\n                return true;\n              }\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  grid_contains_all_unique_letters(word, first_letter_map) {\n    for (var i = 0; i < word.length; i++) {\n      if (!first_letter_map.has(word[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  boggle(grid, dictionary) {\n    var answer = [];\n    var n = grid.length;\n    var first_letter_map = new Map();\n    var boggle_call = 0;\n\n    console.log(grid, first_letter_map);\n\n    for (var i = 0; i < grid.length; i++) {\n      for (var j = 0; j < grid.length; j++) {\n        var letter = grid[i][j];\n        if (!first_letter_map.has(letter)) {\n          first_letter_map.set(letter, [[i, j]]);\n        } else {\n          first_letter_map.get(letter).push([i, j]);\n        }\n      }\n    }\n\n    console.log(first_letter_map, \"maka\");\n    var a = 0;\n\n    while (a < dictionary.length) {\n      var word = dictionary[a].toUpperCase();\n      var start_position = [];\n\n      var skip_by = 8192;\n\n      if (!first_letter_map.has(word[0])) {\n        console.log(a, \"the sahi word\", dictionary[a].toUpperCase());\n        while (skip_by >= 1) {\n          if (\n            a + skip_by < dictionary.length &&\n            word[0] === dictionary[a + skip_by][0].toUpperCase()\n          ) {\n            console.log(a, \"the sahi main word\", dictionary[a].toUpperCase());\n            console.log();\n            a = a + skip_by;\n          } else {\n            console.log(a, \"reducing skip_by\", dictionary[a].toUpperCase());\n            skip_by = skip_by / 2;\n          }\n        }\n        a++;\n        continue;\n      } else {\n        if (!this.grid_contains_all_unique_letters(word, first_letter_map)) {\n          boggle_call++;\n          a++;\n          continue;\n        }\n\n        start_position = first_letter_map.get(word[0]);\n        console.log(a, \"word\", word);\n\n        for (var i = 0; i < start_position.length; i++) {\n          if (answer.includes(word)) {\n            break;\n          }\n          //boggle_call++;\n          var visited_nodes = [];\n          this.visited_node(n, visited_nodes);\n          var element = start_position[i];\n          visited_nodes[element[0]][element[1]] = true;\n          this.check_for_letter_traversal(\n            grid,\n            word,\n            1,\n            element[0],\n            element[1],\n            visited_nodes,\n            answer\n          );\n        }\n      }\n      a++;\n    }\n    console.log(boggle_call, \"boggle_call\");\n    this.setState({ all_valid_words: answer });\n    return answer;\n  }\n\n  SetTheGrid(grid) {\n    var given_grid = [];\n    for (var i = 0; i < 5; i++) {\n      var row = [];\n      for (var j = 0; j < 5; j++) {\n        var position = 5 * i + j;\n        row.push(grid[position]);\n      }\n      given_grid.push(row);\n    }\n    console.log(given_grid);\n    this.setState({ grid: given_grid });\n    console.log(given_grid[0][0]);\n    console.log(word_list[0]);\n    console.log(word_list[10000]);\n  }\n\n  GettheGrid(SetTheGrid) {\n    var girdssssss = db.collection(\"grid\");\n    girdssssss\n      .doc(\"CWzx6Xzk7a6RC91voh5S\")\n      .get()\n      .then(function(snap) {\n        console.log(snap);\n        if (snap.exists) {\n          console.log(snap.data().grid);\n          SetTheGrid(snap.data().grid);\n        }\n      });\n    console.log(\"hey\");\n  }\n\n  PrintGrid() {\n    return (\n      <div>\n        <div>\n          <div>\n            <button>{this.state.grid[0][0]}</button>\n            <button>{this.state.grid[0][1]}</button>\n            <button>{this.state.grid[0][2]}</button>\n            <button>{this.state.grid[0][3]}</button>\n            <button>{this.state.grid[0][4]}</button>\n          </div>\n          <div>\n            <button>{this.state.grid[1][0]}</button>\n            <button>{this.state.grid[1][1]}</button>\n            <button>{this.state.grid[1][2]}</button>\n            <button>{this.state.grid[1][3]}</button>\n            <button>{this.state.grid[1][4]}</button>\n          </div>\n          <div>\n            <button>{this.state.grid[2][0]}</button>\n            <button>{this.state.grid[2][1]}</button>\n            <button>{this.state.grid[2][2]}</button>\n            <button>{this.state.grid[2][3]}</button>\n            <button>{this.state.grid[2][4]}</button>\n          </div>\n          <div>\n            <button>{this.state.grid[3][0]}</button>\n            <button>{this.state.grid[3][1]}</button>\n            <button>{this.state.grid[3][2]}</button>\n            <button>{this.state.grid[3][3]}</button>\n            <button>{this.state.grid[3][4]}</button>\n          </div>\n          <div>\n            <button>{this.state.grid[4][0]}</button>\n            <button>{this.state.grid[4][1]}</button>\n            <button>{this.state.grid[4][2]}</button>\n            <button>{this.state.grid[4][3]}</button>\n            <button>{this.state.grid[4][4]}</button>\n          </div>\n\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n\n  handleSubmit(event) {\n    this.setState({ load_challenge: true });\n    event.preventDefault();\n  }\n\n  handleChange(event, num) {\n    this.GettheGrid(this.SetTheGrid);\n    this.setState({ show_grid: true });\n    event.preventDefault();\n  }\n\n  render() {\n    if (this.state.load_challenge) {\n      if (this.state.show_grid) {\n        return (\n          <div>\n            <div>{this.PrintGrid()}</div>\n            <BoggleGame></BoggleGame>\n          </div>\n        );\n      } else {\n        return (\n          <div>\n            <h1> Load Challenge 1</h1>\n            <button onClick={this.handleChange(1)}>Load Challenge</button>\n            <h1> Load Challenge 2</h1>\n            <button onClick={this.handleChange(1)}>Load Challenge</button>\n            <h1> Load Challenge 3</h1>\n            <button onClick={this.handleChange(1)}>Load Challenge</button>\n          </div>\n        );\n      }\n    } else {\n      return (\n        <div>\n          <button onClick={this.handleSubmit}>Load Challenge</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Boggle;\n\nclass BoggleGame extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input_word: \"\",\n      score: 0,\n      all_valid_words: [\"ACE\", \"ZEROS\"],\n      game_state: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ input_word: event.target.value });\n  }\n\n  handleStop(event) {\n    event.preventDefault();\n    this.setState({ game_state: false });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.valid_words.includes(this.state.input_word)) {\n      alert(\"The word has already been found.\");\n    } else if (\n      //remove the word from this.state.valid_words\n      this.state.all_valid_words.includes(this.state.input_word.toUpperCase())\n    ) {\n      var new_score = this.state.score;\n      new_score++;\n      this.setState({ score: new_score });\n    } else {\n      alert(\"The word you have entered is invalid.\");\n    }\n  }\n\n  render() {\n    if (this.state.game_state) {\n      return (\n        <div>\n          <div>\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <label>\n                  Enter a word:\n                  <input\n                    type=\"text\"\n                    value={this.state.input_word}\n                    onChange={this.handleChange}\n                  />\n                </label>\n                <input\n                  className=\"btn btn-primary\"\n                  type=\"submit\"\n                  value=\"Submit\"\n                />\n              </form>\n            </div>\n            <div>\n              <button onClick={this.handleStop}>Stop</button>\n            </div>\n          </div>\n          <p> Valid words list: </p>\n          <div>{this.state.score}</div>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <div>{this.state.score}</div>\n        </div>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}