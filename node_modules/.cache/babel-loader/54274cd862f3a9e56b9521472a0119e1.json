{"ast":null,"code":"var _jsxFileName = \"/Users/swarnim/Desktop/boggle_app-master/src/extra.js\";\nimport React, { Component } from \"react\";\nimport { db } from \"./firebase\";\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(grid, word, matched_letter, x, y, visited_nodes, answer) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n        if (i >= 0 && j >= 0 && i < grid.length && j < grid.length && visited_nodes[i][j] == false) {\n          if (word[matched_letter] == grid[i][j]) {\n            if (word.length - matched_letter == 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              check_for_letter_traversal(grid, word, matched_letter, i, j, visited_nodes, answer);\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  render() {\n    console.log(this.boggle([[\"A\", \"B\", \"C\", \"D\"], [\"E\", \"F\", \"A\", \"H\"], [\"I\", \"J\", \"K\", \"L\"], [\"A\", \"B\", \"C\", \"D\"]], [\"abcd\"]));\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"My name is Swarnim\");\n  }\n\n}\n\nexport default FindAllValidWords;","map":{"version":3,"sources":["/Users/swarnim/Desktop/boggle_app-master/src/extra.js"],"names":["React","Component","db","word_list","FindAllValidWords","state","visited_node","n","visited_nodes","i","row","j","push","check_for_letter_traversal","grid","word","matched_letter","x","y","answer","length","includes","render","console","log","boggle"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { db } from \"./firebase\";\n\nimport { word_list } from \"./word_list\";\n\nclass FindAllValidWords extends Component {\n  state = {};\n\n  visited_node(n, visited_nodes) {\n    for (var i = 0; i < n; i++) {\n      var row = [];\n      for (var j = 0; j < n; j++) {\n        row.push(false);\n      }\n      visited_nodes.push(row);\n    }\n  }\n\n  check_for_letter_traversal(\n    grid,\n    word,\n    matched_letter,\n    x,\n    y,\n    visited_nodes,\n    answer\n  ) {\n    for (var i = x - 1; i < x + 2; i++) {\n      for (var j = y - 1; j < y + 2; j++) {\n        //console.log('looking for',word[matched_letter],'at',i,j,'from',x,y );\n\n        if (\n          i >= 0 &&\n          j >= 0 &&\n          i < grid.length &&\n          j < grid.length &&\n          visited_nodes[i][j] == false\n        ) {\n          if (word[matched_letter] == grid[i][j]) {\n            if (word.length - matched_letter == 1) {\n              answer.push(word);\n              return true;\n            } else {\n              //console.log();\n              //  console.log(word[matched_letter],'found at',i,j,'from',x,y );\n              matched_letter += 1;\n              visited_nodes[i][j] = true;\n              check_for_letter_traversal(\n                grid,\n                word,\n                matched_letter,\n                i,\n                j,\n                visited_nodes,\n                answer\n              );\n              matched_letter -= 1;\n              visited_nodes[i][j] = true;\n            }\n          }\n        }\n        if (answer.includes(word)) {\n          return true;\n        }\n      }\n    }\n  }\n\n  render() {\n    console.log(\n      this.boggle(\n        [\n          [\"A\", \"B\", \"C\", \"D\"],\n          [\"E\", \"F\", \"A\", \"H\"],\n          [\"I\", \"J\", \"K\", \"L\"],\n          [\"A\", \"B\", \"C\", \"D\"]\n        ],\n        [\"abcd\"]\n      )\n    );\n    return <h1>My name is Swarnim</h1>;\n  }\n}\n\nexport default FindAllValidWords;\n"]},"metadata":{},"sourceType":"module"}